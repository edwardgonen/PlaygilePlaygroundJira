<tr class="mod-header">
    <h3>Playgile Studio Total View for $project.name ($project.getKey())</h3>

    <html>

    <head>
        <script>
            window.onerror = (error, url, line) => {
                var div = document.body
                div.append(error + '\n')
                div.append(url + '\n')
                div.append(line + '\n')
            }
        </script>
        <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <style>
            @media (orientation: portrait) {
                .mobileWidthCahrt {
                    width: 100% !important;
                    height: 40vh !important;
                }
            }

            @media (orientation: landscape) {
                .mobileHeightCahrt {
                    height: 40vh;
                }
            }

            .mobileHeightCahrt .FavoritesContent:empty~.emptyFavoritesText {
                /* background: black; */
                color: gainsboro;
                position: relative;
                top: -33px;
                left: 46px;
                font-size: 23px;
                display: block;
            }

            .emptyFavoritesText {
                display: none;
            }

            .FavoritesContent .StatusBlock {
                background: #2684ff26;
            }

            #quality_score_chart p {
                margin: 0;
            }

            ul {
                padding: 0;
            }

            li {
                list-style-type: none;
            }

            .FavoritesBlock {
                /* 
                position: relative; */
                border: solid 1px gainsboro;
                min-height: 4vh;
                border-radius: 17px;
                width: 100%;
                margin: 20px 0px 10px 0px;
            }

            .FavoritesHeaderLabel {
                color: gainsboro;
                position: relative;
                top: -17px;
                left: 46px;
            }

            .FavoritesHeaderLabelText {
                position: absolute;
                background: white;
                /*width: min-content;*/
                padding: 5px;
                color:black;
                font-weight: bold;
            }

            .resetSearchBtn {
                align-self: center;
            }

            .resetSearchBtn:hover {
                transform: scale(1.1);
                transition: all 0.5s;
            }

            .svg-icon {
                width: 2em;
                height: 2em;
            }

            .svg-icon path,
            .svg-icon polygon,
            .svg-icon rect {
                fill: #4691f6;
            }

            .svg-icon circle {
                stroke: #4691f6;
                stroke-width: 1;
            }

            /* The switch - the box around the slider */
            .switch {
                position: relative;
                display: inline-block;
                width: 60px;
                height: 34px;
            }

            /* Hide default HTML checkbox */
            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

            /* The slider */
            .slider {
                position: absolute;
                cursor: pointer;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: #ccc;
                -webkit-transition: .4s;
                transition: .4s;
            }

            .slider:before {
                position: absolute;
                content: "";
                height: 26px;
                width: 26px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                -webkit-transition: .4s;
                transition: .4s;
            }

            input:checked+.slider {
                background-color: #2196F3;
            }

            input:focus+.slider {
                box-shadow: 0 0 1px #2196F3;
            }

            input:checked+.slider:before {
                -webkit-transform: translateX(26px);
                -ms-transform: translateX(26px);
                transform: translateX(26px);
            }

            /* Rounded sliders */
            .slider.round {
                border-radius: 34px;
            }

            .slider.round:before {
                border-radius: 50%;
            }

            label {
                white-space: nowrap;
            }

            .wrongIput {
                background: #ff000024;
            }

            input:invalid {
                background: #ff000024;
            }

            input {
                border: 2px solid rgba(220, 220, 220, 1);
                color: #2980b9;
                font-size: 16px;
                box-shadow: 1px 1px 3px 1px rgba(200, 200, 200, 0.2) inset;
                /* background-color: rgba(52, 152, 219, 0.1); */
                padding: 1em;
                width: 17em;
                outline: none;
                margin: 0;
                -webkit-transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
                -moz-transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
                -o-transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
                transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
            }

            .form-content {
                padding: 20px;
                inline-size: min-content;
                font-size: 2em;
            }

            select {
                border: 2px solid rgba(220, 220, 220, 1);
                color: #2980b9;
                font-size: 16px;
                box-shadow: 1px 1px 3px 1px rgba(200, 200, 200, 0.2) inset;
                /* background-color: rgba(52, 152, 219, 0.1); */
                padding: 1em;
                width: 500px;
                outline: none;
                margin: 0;
                -webkit-transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
                -moz-transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
                -o-transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
                transition: all 200ms cubic-bezier(0.42, 0, 0.58, 1);
            }

            .saveButtun {
                color: #fff;
                text-decoration: none;
                user-select: none;
                background: rgb(212, 75, 56);
                padding: 1.7vh 5.5vh;
                outline: none;
                margin-top: 10%;
            }

            .saveButtun:hover {
                background: rgb(232, 95, 76);
            }

            .saveButtun:active {
                background: rgb(152, 15, 0);
            }

            .fade {
                top: 0;
                left: 0;
                min-height: 50vh;
                text-align: center;
                position: absolute;
                background: black;
                width: 100%;
                height: 100%;
                z-index: 999;
                opacity: 0.3;
                display: visible;
            }

            .ui-datepicker {
                background: white
            }

            .lds-spinner {
                color: official;
                display: inline-block;
                margin-top: 20vh;
                width: 80px;
                height: 80px;
            }

            .lds-spinner div {
                transform-origin: 40px 40px;
                animation: lds-spinner 1.2s linear infinite;
            }

            .lds-spinner div:after {
                content: " ";
                display: block;
                position: absolute;
                top: 3px;
                left: 37px;
                width: 6px;
                height: 18px;
                border-radius: 20%;
                background: #fff;
            }

            .lds-spinner div:nth-child(1) {
                transform: rotate(0deg);
                animation-delay: -1.1s;
            }

            .lds-spinner div:nth-child(2) {
                transform: rotate(30deg);
                animation-delay: -1s;
            }

            .lds-spinner div:nth-child(3) {
                transform: rotate(60deg);
                animation-delay: -0.9s;
            }

            .lds-spinner div:nth-child(4) {
                transform: rotate(90deg);
                animation-delay: -0.8s;
            }

            .lds-spinner div:nth-child(5) {
                transform: rotate(120deg);
                animation-delay: -0.7s;
            }

            .lds-spinner div:nth-child(6) {
                transform: rotate(150deg);
                animation-delay: -0.6s;
            }

            .lds-spinner div:nth-child(7) {
                transform: rotate(180deg);
                animation-delay: -0.5s;
            }

            .lds-spinner div:nth-child(8) {
                transform: rotate(210deg);
                animation-delay: -0.4s;
            }

            .lds-spinner div:nth-child(9) {
                transform: rotate(240deg);
                animation-delay: -0.3s;
            }

            .lds-spinner div:nth-child(10) {
                transform: rotate(270deg);
                animation-delay: -0.2s;
            }

            .lds-spinner div:nth-child(11) {
                transform: rotate(300deg);
                animation-delay: -0.1s;
            }

            .lds-spinner div:nth-child(12) {
                transform: rotate(330deg);
                animation-delay: 0s;
            }

            @keyframes lds-spinner {
                0% {
                    opacity: 1;
                }

                100% {
                    opacity: 0;
                }
            }

            .detailsView {
                overflow: auto;
                display: none;
                position: fixed;
                z-index: 99;
                background: #8080807a;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                text-align: -webkit-center;
            }

            .editView {
                background: white;
                width: min-content;
                height: min-content;
                margin-top: 1vh;
                border-radius: 3%;
                padding: 29px;
            }

            .editViewWrapper {
                display: none;
                position: fixed;
                z-index: 99;
                background: #8080807a;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                text-align: -webkit-center;
            }

            .ui-progressbar {
                position: relative;
            }

            .progress-label {
                position: absolute;
                left: 50%;
                top: 4px;
                font-weight: bold;
                text-shadow: 1px 1px 0 #fff;
            }

            .generalViewBlock {
                display: flex;
                flex-wrap: wrap;
            }

            .StatusBlock {
                position: relative;
                display: flex;
                flex-wrap: wrap;
                background: #2684ff0d;
                margin: 5px;
                display: flex;
                height: 212px;
                width: min-content;
                padding: 5px;
                animation-name: slideRight;
                -webkit-animation-name: slideRight;
                animation-duration: 1s;
                -webkit-animation-duration: 1s;
                visibility: visible !important;
                border-radius: 20px;
                transition: all 1s;
                transition: all 0.4s;
            }

            .StatusBlock:hover {
                transform: scale(1.02);
                background: #2684ff1a;
                /* 
                backdrop-filter: sepia(1); */
            }

            .Qualityscore1 {
                background: #ff2f2f38;
                color: #ec3e40;
            }

            .Qualityscore1:hover {}

            .QualityscoreText1 {
                color: #ec3e40;
            }

            .QualityscoreHeader1 {
                background: #ec3e40;
            }

            .Qualityscore2 {
                background: #ffc82f38;
                color: #f5d800;
            }

            .Qualityscore2:hover {}

            .QualityscoreText2 {
                color: #f5d800;
            }

            .QualityscoreHeader2 {
                background: #f5d800;
            }

            .Qualityscore3 {
                background: #34d12938;
                color: #01a46d;
            }

            .Qualityscore3:hover {}

            .QualityscoreText3 {
                color: #01a46d;
            }

            .QualityscoreHeader3 {
                background: #01a46d;
            }

            .StatusBlockDivBtn {
                position: absolute;
                bottom: 0;
                right: 0;
            }

            @-webkit-keyframes slideRight {
                0% {
                    opacity: 0;
                }

                100% {
                    opacity: 1;
                }
            }

            .ButtonPluginWrapper {
                position: absolute;
                /* top: 0; */
                right: 0;
                /* background: white;*/
            }

            .ButtonPlugin {
                transform: scale(1.5);
                /* font-size: 2vh; */
                margin: 11px;
                /* padding: 8px; */
                /* margin: 10px; */
                /* background: white; */
                /* width: -webkit-fill-available; */
                /* box-sizing: border-box; */
                /* transition: background-color .1s ease-out; */
                /* border-radius: 3.01px; */
                /* cursor: pointer; */
                /* font-family: inherit; */
                /* font-size: 14px; */
                /* font-variant: normal; */
                /* font-weight: 400; */
                /* background-image: none; */
                /* background-color: rgba(9,30,66,.08); */
                /* border: 1px solid transparent; */
                /* color: #344563; */
                /* text-decoration: none; */
                /* display: inline-block; */
                /* height: 2.14285714em; */
                /* line-height: 1.42857143em; */
                /* margin: 0; */
                /* padding: 4px 10px; */
                /* vertical-align: baseline; */
                /* white-space: nowrap; */
                /* position: relative; */
                /* color: #deebff; */
                /* background-color: #2684ff; */
                /* border: 0; */
                /* line-height: 1.57142857; */
                /* margin: 5px 0 0 10px; */
                /* padding: 4px 10px; */
                /* background-image: none; */
                /* text-decoration: none; */
                /* font-weight: 600;*/
            }

            .FavoritesContent {
                min-height: 6vh;
                display: flex;
                flex-wrap: wrap;
                top: 17px;
                left: 0;
            }

            .progressbarMain {
                display: none;
            }

            .generalLoading {
                display: none;
            }
            .ProjectConfigDiv{
                display: flex;
                justify-content: flex-end;
                align-items: center;
            }
            .empty_velocity_chart {
                background: #f4f5f7;
            }
            .empty_velocity_chart :first-child {
                padding-top:20%;
            }
            .FavoritesContent:empty:before  {
              content: "Drag and drop the feature block here to add to favorites";
              color:gainsboro;
              margin:auto;
            }
        </style>
    </head>

    <body>
        #if (!$allisok)
        <script>
            var dialog = new AJS.Dialog({
                id: "message-status-dialog",
                closeOnOutsideClick: false
            });
            dialog.addHeader("Playgile Studio View");
            dialog.addPanel("Panel 1", '<h1 style="color:red">$messagetodisplay</h1>', "panel-body");

            dialog.addButton("OK", function (dialog) {
                dialog.hide();
            }, "#");
            dialog.show();
        </script>
        <h1 style="color:red">$messagetodisplay</h1>
        #end

        #if ($allisok)
        <br>
        <div class="ProjectConfigDiv">
            <h3>Set project configuration:</h3>
            <div class="ProjectEditPopupBtn ButtonPlugin aui-icon aui-icon-small aui-iconfont-configure">
            </div>
        </div>
        <div id="progressbar" class="progressbarMain">
            <div class="progress-label">Loading...</div>
        </div>
        <div style="display: flex;">
            <input class="FeatureSearch" type="text" placeholder="Feature search" size="40">
            <select class="TeamsSearch"></select>
            <div class="resetSearchBtn"><svg class="svg-icon current" data-name="trash" width="30px" height="30px"
                    viewBox="0 0 30 30">
                    <path fill="none" d="M10.83,12.498H9.162v10.009h1.668V12.498z M20.839,12.498h-1.668v10.009h1.668V12.498z M27.512,4.99h-8.341
                V2.488c0-0.461-0.374-0.834-0.834-0.834h-6.673c-0.461,0-0.834,0.373-0.834,0.834V4.99H2.488c-0.461,0-0.834,0.373-0.834,0.834
                c0,0.461,0.373,0.834,0.834,0.834h1.668v20.019c0,0.921,0.747,1.668,1.668,1.668h18.351c0.921,0,1.668-0.747,1.668-1.668V6.659
                h1.668c0.461,0,0.834-0.373,0.834-0.834C28.346,5.363,27.973,4.99,27.512,4.99z M12.498,3.322h5.004V4.99h-5.004V3.322z
                 M24.176,25.844c0,0.461-0.374,0.834-0.834,0.834H6.659c-0.461,0-0.834-0.373-0.834-0.834V6.659h18.351V25.844z M15.834,10.829
                h-1.668v11.678h1.668V10.829z"></path>
                </svg>
            </div>
        </div>
        <div class="FavoritesBlock">
            <div class="FavoritesHeaderLabel">
                <div class="FavoritesHeaderLabelText">Favorites</div>
            </div>
            <ul class="FavoritesContent connectedSortable "></ul>
            <div class="emptyFavoritesText">Drag & Drop Features HERE</div>
        </div>
        <div class="content">
            <div id="FadeBlock" class="fade">
                <div class="lds-spinner">
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </div>
            <div class="editViewWrapper">
                <div class="editView"></div>
            </div>
            <div class="detailsView"></div>
            <div class="generalLoading">
                generalLoading
            </div>
            <!--
            <div class="FavoritesBlock">
                <div class="FavoritesHeaderLabel">
                    <div class="FavoritesHeaderLabelText">All</div>
                </div>
                <ul class="generalViewBlock connectedSortable "></ul>
            </div>
            -->
        </div>
        <table id="roadmap-features-table" ; width="100%">
        </table>
        <div style="align-items: center; display: inline-flex;">
            <div>Debug Mode</div>
            <label class="switch">
                <input class="debugSwitch" type="checkbox">
                <span class="slider round"></span>
            </label>
        </div>


        #end
        <script>
            try {
                /**
                * Initializing google charts
                */
                window.onload = function () {
                    google.charts.load('current', { 'packages': ['corechart'] });
                    google.charts.load('current', { 'packages': ['gauge'] });
                    google.charts.load('current', { 'packages': ['timeline'] });
                    google.charts.setOnLoadCallback(init);
                };
                /**
                * Data model of application
                * #featureArray - features array from server
                * #viewChildren - links of total view block
                */
                class Model {
                    constructor() {
                        this.featureArray = []
                        this.viewChildren = []
                        this.teams = {}
                        this.projectConfig = {}
                        this.groupBy = []
                    }
                    addViewChildren(elem) {
                        this.viewChildren.push(elem)
                    }
                    addTeam(teamName) {
                        this.teams[teamName] = true;
                    }
                }
                var STORE = new Model()
                /**
                * Logic for debug mode
                */
                const DEBUG_MODE = eval(localStorage.pluginDebugMode) ? 'sendLog=1&' : '';
                /**
                * First initializing favorites save logic
                */
                if (!localStorage.pluginFavorites) { localStorage.pluginFavorites = '[]' };
                var FAVORITES = JSON.parse(localStorage.pluginFavorites);
                var GROUP_BY = []
                /**
                * First initializing search save logic
                */
                if (!localStorage.searchData) { localStorage.searchData = JSON.stringify({ featureSearch: '', teamName: '' }) };
                if (!JSON.parse(localStorage.searchData).teamName) { localStorage.searchData = JSON.stringify({ featureSearch: '', teamName: '' }) };
                const SEARCH_DATA = JSON.parse(localStorage.searchData);

                const PROJECT_NAME = /[^/]*$/.exec(location.pathname);
                const BASE_URL = '$baseurl';
                const FEATURES_URL = BASE_URL + '/plugins/servlet/getActiveFeatures?' + DEBUG_MODE + 'projectKey=' + PROJECT_NAME;
                const PROJECT_CONFIG_URL = BASE_URL + `/plugins/servlet/projectConfiguration?${DEBUG_MODE}projectKey=${PROJECT_NAME}`
                const GET_FEATURE_DATA_URL = BASE_URL + '/plugins/servlet/getAnalyzedFeature?' + DEBUG_MODE + 'projectKey=' + PROJECT_NAME + '&feature=';
                const GET_URL = location.origin + location.pathname + '?projectKey=' + PROJECT_NAME;
                const POST_UTL = BASE_URL + '/plugins/servlet/pluginConfiguration' + '?projectKey=' + PROJECT_NAME;
                /**
                * Min and max SP for input fields on configuration page
                */
                const MIN_INPUT_SP = 0;
                const MAX_INPUT_SP = 200;

                const TODAY_LOCAL_FORMAT = new Date().toLocaleDateString();
                let $generalViewBlock, $generalViewTable, progressbar, progressLabel, $featureSearch, $teamsSearch, $resetSearchBtn
                /**
                * Point of entry
                */
                function init() {
                    /**
                    * Convert DomElements to jQueryElements
                    */
                    $generalViewBlock = $('.generalViewBlock');
                    $generalViewTable = $('.generalViewTable');
                    progressbar = $("#progressbar");
                    progressLabel = $(".progress-label");
                    $featureSearch = $(".FeatureSearch")
                        /** Adding default value of search input field from saved value */
                        .val(SEARCH_DATA.featureSearch)
                        /** Handler of search input filed*/
                        .on('input', (e) => { featureSearchOnChange(e.currentTarget.value) })
                    $teamsSearch = $(".TeamsSearch")
                        /** Handler of teams search input filed*/
                        .on('input', (e) => { teamsSearchOnChange(e.currentTarget.value) })
                    $resetSearchBtn = $('.resetSearchBtn')
                        /** Click handler of reset buttom*/
                        .click(resetSearch);
                    /** Initializing progress bar*/
                    buildProgressBar();
                    $projectEditPopupBtn = $('.ProjectEditPopupBtn')
                        .click((e) => {
                                e.stopPropagation(); new ProjectEditView('', '.editViewWrapper')
                        })
                    /** Fade turned off, because user already can use plugin */
                    Fade.off()
                    /**
                    * Initializing debug switcher
                    */
                    $('.debugSwitch')[0].checked = !!eval(localStorage.pluginDebugMode)
                    $('.switch')
                        .click(() => {
                            /** Save new debug value and reload page after click */
                            localStorage.pluginDebugMode = $('.debugSwitch')[0].checked
                            location.reload()
                        })
                    /**
                     * Request project CONFIG from servlet
                     */
                    doPost(PROJECT_CONFIG_URL, {}, function (data) {
                        STORE.projectConfig = {
                            isAdmin: data.isAdmin,
                            isProjectEpics: data.isProjectEpics,
                            viewType: data.viewType,
                            isProjectTickets: data.isProjectTickets,
                            groupBy: data.groupBy,
                            groups:data.groups
                        }
                        console.log(data)
                    }, 'get')
                    /**
                     * Request project features from servlet
                     */
                    doPost(FEATURES_URL, {}, function (data) {
                        STORE.features = data.featuresList
                        console.log(data)
                        /** Start build total view blocks */
                        initBuildPanels()
                    })
                }

                /**
                * Recursively creating totalview blocks
                */
                function initBuildPanels() {
                    /** If the number of features and the total view blocks are the same, stop the recursion */
                    if (STORE.features.length == STORE.viewChildren.length) { return }

                    let loadingValue = 100 / STORE.features.length;
                    let featureId = encodeURIComponent(STORE.features[STORE.viewChildren.length].featureKey);
                    let $panelBlock = $('<li>')
                    STORE.addViewChildren($panelBlock);

                    doPost(GET_FEATURE_DATA_URL + featureId, {}, function (data) {
                        if(STORE.groupBy.indexOf(data.groupBy)<0&&data.groupBy!=null){
                            STORE.groupBy.push(data.groupBy)        
                            var $groupByBlock = $('<div>').html(getGroupByHTMLBlock(data.groupBy))
                            $('.content').append($groupByBlock)
                        }
                        $(`*[data-groupBy="${data.groupBy}"]`).append($panelBlock)
                        //$generalViewBlock.append($panelBlock)
                        progressbar.progressbar("value", progressbar.progressbar("value") < 90 ? progressbar.progressbar("value") + loadingValue : 100);
                        if (!!data.statusMessage) {
                            $panelBlock.hide()
                        } else {
                            $panelBlock.empty();
                            $panelBlock.append($(getTotalViewBlock(data)).data({ featureKey: data.key, teamName: data.teamName }));
                            $panelBlock.click(() => { drawDeteilsView(data) })
                            if (FAVORITES.includes(data.key)) { $panelBlock.detach().appendTo('.FavoritesContent') }
                            console.log(data)
                            STORE.addTeam(data.teamName)
                            /** Drag and Drop logic */
                            $(function () {
                                $(".generalViewBlock, .FavoritesContent").sortable({
                                    connectWith: ".connectedSortable"
                                }).disableSelection();
                                $('.FavoritesContent').sortable({
                                    deactivate: function (event, ui) {
                                        var _$array = $('.FavoritesContent').children().map(function () { return $(this).children().data('featureKey') });
                                        var _array = Array.from(_$array);
                                        FAVORITES = _array
                                        localStorage.pluginFavorites = JSON.stringify(_array)
                                    }
                                })
                            });

                            updateTeamsSearch()

                            genericSortFeature()
                        }

                    })
                    /** Continuing recursion */
                    initBuildPanels()


                }
                function getGroupByHTMLBlock(groupBy){
                return `
                    <div class="FavoritesBlock" >
                        <div class="FavoritesHeaderLabel">
                        <div class="FavoritesHeaderLabelText">${groupBy}</div>
                    </div>
                        <ul class="generalViewBlock connectedSortable " data-groupby="${groupBy}"></ul>
                    </div>`
                }
                function updateTeamsSearch() {
                    var _currentVal = SEARCH_DATA.teamName
                    $teamsSearch.empty()
                    $teamsSearch.append($('<option>').text(''))
                    for (const key in STORE.teams) {
                        $teamsSearch.append($('<option>').text(key))
                    }
                    $teamsSearch.val(_currentVal)
                }
                /**
                * Build totalView block
                * return HTML element
                */
                function getTotalViewBlock(featureData) {

                    const SUMMARY = featureData.summary;//[0]

                    const QUALITY_SCORE = normolizedInt(featureData.qualityScore.totalScore);//[1]

                    const START_DATE_ROADMAP_FEATURE = normolizedDate(featureData.startDateRoadmapFeature);//[2]

                    const PLANNED_VELOCITY = normolizedInt(featureData.plannedRoadmapFeatureVelocity);//[3]

                    //NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE
                    const PROJECT_VELOCITY = normolizedInt(13);//[4] I dont know how find it

                    const IDEAL_PROJECT_END = normolizedDate(featureData.idealProjectEnd);//[5]

                    const PREDICTED_PROJECT_END = normolizedDate(featureData.predictedProjectEnd);//[6]

                    const NOT_ESTIMATED_STORIES_NUMBER = normolizedInt(featureData.notEstimatedStoriesNumber);//[7]

                    const LARGE_STORIES_NUMBER = normolizedInt(featureData.largeStoriesNumber);//[8]

                    const VERY_LARGE_STORIES_NUMBER = normolizedInt(featureData.veryLargeStoriesNumber);//[9]

                    const ESTIMATED_STORIES_NUMBER = normolizedInt(featureData.estimatedStoriesNumber);//[10]

                    const TARGET_DATE = normolizedDate(featureData.targetDate)

                    const LINE_COLOR1 = '#4285f4'
                    const LINE_COLOR2 = "#cccc00"//[11]


                    const ROW_HEIGHT = 100;
                    const ROW_WIDTH = 100;
                    const LABEL = 'Label';
                    const VALUE = 'Value';
                    const RISK = 'Risk'

                    var table = document.createElement('div');
                    /////////////////////////////////////////////////////////////
                    table.className = `StatusBlock`
                    ///////////////////////////////////////////////////////////////
                    var featureNameCell = document.createElement('h2');
                    table.append(featureNameCell)
                    featureNameCell.style.width = '100%';
                    featureNameCell.innerText = SUMMARY;
                    ////////////////////////////////////////////////////////////////////
                    var startDateCell = document.createElement('div');
                    table.append(startDateCell);
                    startDateCell.className = `Qualityscore${QUALITY_SCORE}`
                    startDateCell.style.margin = '23px'
                    startDateCell.style.alignSelf = 'center'
                    startDateCell.style.fontWeight = 'bold'
                    startDateCell.style.width = "250px";
                    startDateCell.style.background = 'transparent'
                    let p1 = document.createElement('p');
                    p1.innerText = 'Started on: ' + START_DATE_ROADMAP_FEATURE.toDateString().slice(4);
                    let p2 = document.createElement('p');
                    p2.innerText = 'Target date: ' + TARGET_DATE.toDateString().slice(4)
                    let p3 = document.createElement('p');
                    p3.innerText = 'Predicted end: ' + PREDICTED_PROJECT_END.toDateString().slice(4)
                    startDateCell.append(p1, p2, p3)
                    ///////////////////////////////////////
                    let progressDiv = document.createElement('div');
                    progressDiv.style.alignSelf = 'center';
                    progressDiv.style.width = "200px";
                    startDateCell.append(progressDiv)
                    let $progressDiv = $(progressDiv);
                    let TODAY = new Date()
                    let progressValue = (TODAY - START_DATE_ROADMAP_FEATURE) / (PREDICTED_PROJECT_END - START_DATE_ROADMAP_FEATURE) * 100;
                    let progressCreateFn = function (event, ui) { $(this).find('.ui-widget-header').addClass(`Qualityscore${QUALITY_SCORE}`) }
                    $(function () {
                        $progressDiv.progressbar({
                            value: progressValue,
                            create: progressCreateFn
                        });
                    });
                    //(new Date() - START_DATE_ROADMAP_FEATURE)/(PREDICTED_PROJECT_END-START_DATE_ROADMAP_FEATURE)
                    //(today date - start project) / (predicted end - start project)
                    ///////////////////////////////////
                    var configButtnsCell = document.createElement('div');
                    configButtnsCell.className = 'ButtonPluginWrapper';
                    table.append(configButtnsCell)
                    var $configButtnsCell = $(configButtnsCell).addClass('StatusBlockDivBtn');
                    var $buttonEdit = $('<div class="ButtonPlugin aui-icon aui-icon-small aui-iconfont-configure">')
                        .click((e) => { e.stopPropagation(); new EditView(featureData, '.editViewWrapper') });
                    $configButtnsCell.append($buttonEdit)

                    return table
                }
                function buildProgressBar() {
                    $(function () {
                        progressbar.progressbar({
                            value: 0,
                            change: function () {
                                progressLabel.text(parseInt(progressbar.progressbar("value")) + "%");
                            },
                            complete: function () {
                                progressLabel.text("All data loaded!");
                                setTimeout(() => { progressbar.hide() }, 3000)
                            }
                        });
                    });
                }
                function resetSearch() {
                    localStorage.searchData = JSON.stringify({ featureSearch: '', teamName: '' });
                    $teamsSearch.val('')
                    $featureSearch.val('')
                    genericSortFeature()
                }
                function featureSearchOnChange(value) {
                    var searchData = JSON.parse(localStorage.searchData)
                    searchData.featureSearch = value;
                    localStorage.searchData = JSON.stringify(searchData)

                    genericSortFeature()
                }
                function teamsSearchOnChange(value) {
                    var searchData = JSON.parse(localStorage.searchData)
                    searchData.teamName = value;
                    localStorage.searchData = JSON.stringify(searchData)

                    genericSortFeature()
                }
                function genericSortFeature() {
                    var searchData = JSON.parse(localStorage.searchData);
                    var featureNameSearch = searchData.featureSearch.toUpperCase();
                    var teamNameSearch = searchData.teamName.toUpperCase();
                    STORE.viewChildren.forEach((elem) => {
                        if (elem.parent().hasClass('FavoritesContent')) { return };
                        if (elem.find('h2')[0]) {
                            let result1 = false;
                            let result2 = false;
                            var text = elem.find('h2')[0].innerText;
                            if (!featureNameSearch.length || text.toUpperCase().indexOf(featureNameSearch) >= 0) { result1 = true };
                            if (!teamNameSearch.length || elem.children().data().teamName.toUpperCase().indexOf(teamNameSearch) >= 0) { result2 = true };
                            result1 && result2 ? elem.show() : elem.hide()
                        }
                    })
                }
                function normolizedInt(int) {
                    if ((typeof int) == 'number') {
                        return parseFloat(int)
                    } else {
                        return null
                    }
                }
                function normolizedDate(date) {
                    return (new Date(date))
                }
                /**
                * Build deteiled view block
                */
                function drawDeteilsView(featureData) {
                    let $detailsView = $('.detailsView');
                    $detailsView.show()
                    try {
                        let html = `<h1 class=QualityscoreHeader${featureData.qualityScore.totalScore} style="color:white;">
                        <a style="color: white;" href="${BASE_URL}/browse/${featureData.key}" target="_blank">${featureData.summary} by ${featureData.teamName} team</a>
                        </h1>
                    <div>Click outside the panel to close</div>
                    <div class="mobileHeightCahrt" style="width: 90%; display: flex; flex-wrap: wrap; margin: 5px;">   
                        <div id="curve_chart" class="mobileWidthCahrt" style="width:32%; height:100%; padding:5px"></div>
                        <div id="velocity_chart" class="mobileWidthCahrt" style="width:32%; height:100%;  margin:5px"></div>
                        <div id="piechart" class="mobileWidthCahrt" style="width:32%; height:100%;  padding:5px"></div>
                    </div>
                    <div class="mobileHeightCahrt" style="width: 90%; display: flex; flex-wrap: wrap; margin: 5px;">
                            <div id="open_total_chart" class="mobileWidthCahrt" style="width:32%; height:100%;  padding:5px"></div>
                            <div id="quality_score_chart" class="mobileWidthCahrt" style="width:32%; height:100%;  margin:5px; background:#f4f5f7">
                                <div style="width:100%; height:33%; display: inline-flex;">
                                    <div id="gauge0" style="width:33%; height:90%;"></div>
                                    <div class="gaugeDescr0" style="width:77%; height:100%; text-align: left; margin: 5px;"></div>
                                </div>
                                <div style="width:100%; height:33%; display: inline-flex;">
                                    <div id="gauge1" style="width:33%; height:90%;"></div>
                                    <div class="gaugeDescr1" style="width:77%; height:100%; text-align: left; margin: 5px;"></div>
                                </div>
                                <div style="width:100%; height:33%; display: inline-flex;">
                                    <div id="gauge2" style="width:33%; height:90%;"></div>
                                    <div class="gaugeDescr2" style="width:77%; height:100%; text-align: left; margin: 5px;"></div>
                                </div>
                            </div>
                            <div id="issue_distribution" class="mobileWidthCahrt" style="width:32%; height:100%;  padding:5px"></div>
                    </div>`
                        $detailsView.html(html);
                        let $curve_chart = $detailsView.find('#curve_chart');
                        let $velocity_chart = $detailsView.find('#velocity_chart');
                        let $piechart = $detailsView.find('#piechart');
                        let $open_total_chart = $detailsView.find('#open_total_chart');
                        let $qualityScoreChart = $detailsView.find('#quality_score_chart');
                        let $gauge0 = $detailsView.find('#gauge0');
                        let $gauge1 = $detailsView.find('#gauge1');
                        let $gauge2 = $detailsView.find('#gauge2');
                        let $issue_distribution = $detailsView.find('#issue_distribution');


                        //////////////////curve_chart///////////////////////
                        var data = new google.visualization.DataTable();
                        data.addColumn('date', 'Date');
                        data.addColumn({ type: 'string', role: 'annotation' });
                        data.addColumn('number', 'Initial Velocity');
                        data.addColumn('number', 'Predicted Velocity');

                        const LINES = featureData.progressDataSets
                        LINES.forEach(function (line, index) {
                            let date = new Date(line.date)
                            let ideal = null;
                            if (Number.isFinite(line.idealEstimations)) {
                                ideal = Math.round(parseFloat(line.idealEstimations));
                                /* if (line.idealEstimations == 0 && LINES[index - 1].idealEstimations == 0) {
                                    ideal = null;
                                } */
                            }
                            let predicted = null;
                            if (Number.isFinite(line.predictedEstimations)) {
                                predicted = Math.round(parseFloat(line.predictedEstimations))
                                /* if (line.predictedEstimations == 0 && LINES[index - 1].predictedEstimations == 0) {
                                    predicted = null;
                                } */
                            }
                            let _annotationRemaing = date.toLocaleDateString() == TODAY_LOCAL_FORMAT ? 'Remaining ' + ideal + ' SP ' : null;
                            data.addRow([date, _annotationRemaing, ideal, predicted]);
                        });

                        let lastDate = new Date(LINES[LINES.length - 1].date);
                        let targetDate = new Date(featureData.targetDate);
                        if (lastDate < targetDate) {
                            data.addRow([targetDate, null, 0, 0]);
                        }


                        var options = {
                            title: 'Project Monitor\n' +
                                'ETA is ' + new Date(featureData.predictedProjectEnd).toLocaleDateString() + ' based on velocity of ' + featureData.predictedVelocity + ', Target ' + new Date(featureData.targetDate).toLocaleDateString(),
                            lineWidth: 3,
                            series: {
                                0: { lineDashStyle: [0, 0] },
                                1: { lineDashStyle: [2, 2], color: '#009900' }
                            },
                            width: '100%',
                            height: '100%',
                            annotations: {
                                style: 'line',
                                textStyle: {
                                    fontName: 'sans-serif',
                                    fontSize: 12
                                }
                            },
                            vAxes: [
                                {
                                    title: 'Story Points',
                                    viewWindow: {
                                        min: 0
                                    }
                                }
                            ],
                            curveType: 'function',
                            legend: { position: 'bottom' },
                            backgroundColor: '#f4f5f7'
                        };
                        var chart = new google.visualization.LineChart($curve_chart[0]);
                        chart.draw(data, options);
                        google.visualization.events.addListener(chart, 'ready', chartReadyHandler);
                        function chartReadyHandler() {
                            drawVAxisLine(chart, targetDate)
                        }
                        function drawVAxisLine(chart, value) {
                            var layout = chart.getChartLayoutInterface();
                            var chartArea = layout.getChartAreaBoundingBox();

                            var svg = chart.getContainer().getElementsByTagName('svg')[0];
                            var xLoc = layout.getXLocation(value)
                            svg.appendChild(createLine(xLoc, chartArea.top, chartArea.height, 'red', 4)); // axis line
                        }
                        function createLine(x1, y1, z, color, w) {
                            var line = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                            line.setAttribute('x', x1);
                            line.setAttribute('y', y1);
                            line.setAttribute('width', 2);
                            line.setAttribute('height', z);
                            line.setAttribute('fill', color);
                            //line.setAttribute('stroke-width', w);
                            return line;
                        }
                        ///////piechart///////////
                        var dataIssueDistribution = new google.visualization.DataTable();

                        dataIssueDistribution.addColumn('string', 'Category');
                        dataIssueDistribution.addColumn('number', 'Value');
                        var notEstimatedNumber = featureData.notEstimatedStoriesNumber || 0;
                        var largeStoriesNumber = featureData.largeStoriesNumber || 0;
                        var veryLargeStoriesNumber = featureData.veryLargeStoriesNumber || 0;
                        var estimatedStoriesNumber = featureData.estimatedStoriesNumber || 0;
                        dataIssueDistribution.addRow(['Not estimated', notEstimatedNumber]);
                        dataIssueDistribution.addRow(['Very Large (21 points)', veryLargeStoriesNumber]);
                        dataIssueDistribution.addRow(['Large (13 points)', largeStoriesNumber]);
                        dataIssueDistribution.addRow(['Normal', estimatedStoriesNumber]);
                        var totalStories = notEstimatedNumber + largeStoriesNumber + veryLargeStoriesNumber + estimatedStoriesNumber;
                        var optionsIssueDistribution = {
                            title: 'Project Issues Analysis. Total ' + totalStories + ' issues',
                            backgroundColor: '#f4f5f7',
                            width: '100%',
                            height: '100%'
                        };
                        var chartIssueDistributionPie = new google.visualization.PieChart($piechart[0]);
                        google.visualization.events.addListener(chartIssueDistributionPie, 'select', () => {
                            var selectedItem = chartIssueDistributionPie.getSelection()[0];
                            if (selectedItem) {
                                let storyPointsCondition = (() => {
                                    switch (selectedItem.row) {
                                        case 0:
                                            return `and ("Story Points" is empty or "Story Points" = 0)`
                                        case 3:
                                            return `and "Story Points" > 0 and "Story Points" < 13`
                                        case 2:
                                            return `and "Story Points" = 13`
                                        case 1:
                                            return `and "Story Points" > 13`
                                        default:
                                            return ``
                                            break;
                                    }
                                })()
                                var jqlProjectParam = featureData.isProjectIssues ? ` and project=${PROJECT_NAME}` : ''
                                var bugInclude = featureData.viewType.toLowerCase() === 'epic' ? 'Bug,' : ''
                                window.open(`${BASE_URL}/issues/?jql=(issueFunction in issuesInEpics("issuekey = ${featureData.key}") OR issueFunction in issuesInEpics("issueFunction in linkedIssuesOf(\\"issuekey = ${featureData.key}\\", \\"Is Parent task of:\\")")) and issuetype in (Story, Task, "Tech Story", ${bugInclude} Research, "Technical Debt") and status not in (Cancelled, Go-Live, "On Hold", Closed, Done) ${storyPointsCondition} ${jqlProjectParam}`)
                            }
                        });
                        chartIssueDistributionPie.draw(dataIssueDistribution, optionsIssueDistribution);
                        ///////////velocity_chart///////
                        var velocityChartRows = featureData.velocityDataSets;
                        if(velocityChartRows.length>=2){
                        var dataVelocity = new google.visualization.DataTable();
                            dataVelocity.addColumn('date', 'Date');
                            dataVelocity.addColumn('number', 'Actual Velocity');
                            dataVelocity.addColumn('number', 'Predicted Velocity');
                            velocityChartRows.forEach(function (line, index) {
                                var date = new Date(line.date);
                                var realVelocity = line.realVelocity || 0;
                                var linearVelocity = line.interpolatedVelocity || 0;
                                dataVelocity.addRow([date, realVelocity, linearVelocity]);

                            });
                            var optionsVelocityChart = {
                                title: 'Actual Velocity Chart\nLinear regression predicted velocity: ' + featureData.predictedVelocity,
                                lineWidth: 3,
                                width: '100%',
                                height: '100%',
                                series: {
                                    0: { lineDashStyle: [0, 0] },
                                    1: { lineDashStyle: [10, 2], color: 'black' }
                                },
                                vAxes: {
                                    0: {
                                        title: 'Story Points per Sprint',
                                        viewWindow: {
                                            min: 0
                                        }
                                    }
                                },
                                curveType: 'function',
                                legend: { position: 'bottom' },
                                backgroundColor: '#f4f5f7'
                            };
                            var chartVelocity = new google.visualization.LineChart($velocity_chart[0]);
                            chartVelocity.draw(dataVelocity, optionsVelocityChart);
                        } else {
                            $($velocity_chart[0])
                                .html(`<h1>There is not enough data to calculate the actual velocity.</h1>
                                        <h3>It will be available after the second sprint completed. </h3>`)
                                .addClass('empty_velocity_chart')
                        }
                        //////////////////open_total_chart/////////////////////////
                        var dataOpenTotalChart = new google.visualization.DataTable();
                        dataOpenTotalChart.addColumn('date', 'Date');
                        dataOpenTotalChart.addColumn('number', 'Open');
                        dataOpenTotalChart.addColumn('number', 'Total');
                        dataOpenTotalChart.addColumn('number', 'RFD');
                        dataOpenTotalChart.addColumn('number', 'RFE');
                        featureData.issueCountsDataSets.forEach((line) => {
                            let date = new Date(line.date);
                            let openIssues = line.openIssues;
                            let totalIssues = line.totalIssues;
                            let readyForDevelopmentIssues = line.readyForDevelopmentIssues;
                            let readyForEstimationIssues = line.readyForEstimationIssues;
                            dataOpenTotalChart.addRow([date, openIssues, totalIssues, readyForDevelopmentIssues, readyForEstimationIssues]);
                        })
                        let optionsOpenTotal = {
                            title: 'Issues Distribution',
                            lineWidth: 3,
                            width: '100%',
                            height: '100%',
                            legend: { position: 'bottom' },
                        }
                        var chartOpenTotal = new google.visualization.AreaChart($open_total_chart[0]);
                        chartOpenTotal.draw(dataOpenTotalChart, optionsOpenTotal);
                        ///////////////////qualityScoreChart/////////////////////////////
                        let qualityScore = featureData.qualityScore
                        let delay = qualityScore.delayScore
                        let estimation = qualityScore.estimationScore
                        let readiness = qualityScore.readinessScore
                        var dataGauge0 = google.visualization.arrayToDataTable([
                            ['Label', 'Value'],
                            ['', delay]
                        ]);
                        var dataGauge1 = google.visualization.arrayToDataTable([
                            ['Label', 'Value'],
                            ['', estimation]
                        ]);
                        var dataGauge2 = google.visualization.arrayToDataTable([
                            ['Label', 'Value'],
                            ['', readiness]
                        ]);

                        var optionsQualityScoreChart = {
                            greenFrom: 2.4, greenTo: 3.2,
                            yellowFrom: 1.6, yellowTo: 2.4,
                            redFrom: 0.8, redTo: 1.6,
                            minorTicks: 5,
                            min: 0.8,
                            max: 3.2
                        };

                        var chartGauge0 = new google.visualization.Gauge($gauge0[0]);
                        var chartGauge1 = new google.visualization.Gauge($gauge1[0]);
                        var chartGauge2 = new google.visualization.Gauge($gauge2[0]);

                        chartGauge0.draw(dataGauge0, optionsQualityScoreChart);
                        chartGauge1.draw(dataGauge1, optionsQualityScoreChart);
                        chartGauge2.draw(dataGauge2, optionsQualityScoreChart);

                        $('.gaugeDescr0').html(`
                            <h2 class=QualityscoreText${delay}>Delay</h2>
                            <p style="font-size: 1.8vh;">${qualityScore.delayScoreComment}</p>
                        `)
                        $('.gaugeDescr1').html(`
                            <h2 class=QualityscoreText${estimation}>Estimations</h2>
                            <p style="font-size: 1.8vh;">${qualityScore.estimationScoreComment}</p>
                        `)
                        $('.gaugeDescr2').html(`
                            <h2 class=QualityscoreText${readiness}>BL Readiness</h2>
                            <p style="font-size: 1.8vh;">${qualityScore.readinessScoreComment}</p>
                        `)
                        /////////////////issue_distribution///////////////
                        var distributionResult = featureData.overallIssuesDistributionInSprint;
                        var firstQ = parseFloat(distributionResult[0]) || 0;
                        var secondQ = parseFloat(distributionResult[1]) || 0;
                        var thirdQ = parseFloat(distributionResult[2]) || 0;
                        var fourthQ = parseFloat(distributionResult[3]) || 0;
                        var dataIssueDistribution = google.visualization.arrayToDataTable([
                            ["Segment", "Distribution", { role: "style" }],
                            ["1/4 of sprint", firstQ * 100, "#3366CC"],
                            ["2/4 of sprint", secondQ * 100, "#3366CC"],
                            ["3/4 of sprint", thirdQ * 100, "#3366CC"],
                            ["End of sprint", fourthQ * 100, "#3366CC"]
                        ]);
                        var optionsIssueDistribution = {
                            width: '100%',
                            height: '100%',
                            title: "Average Issue Closure Distribution (%) in a typical sprint",
                            bar: { groupWidth: "90%" },
                            legend: { position: "bottom" },
                            vAxes: {
                                0: {
                                    title: 'Percentage of closed issues',
                                    viewWindow: {
                                        min: 0
                                    }
                                }
                            },
                            backgroundColor: '#f4f5f7'
                        };
                        var chartIssueDistribution = new google.visualization.ColumnChart($issue_distribution[0]);
                        chartIssueDistribution.draw(dataIssueDistribution, optionsIssueDistribution);
                        /**
                        * Resize handler
                        */
                        $(window).resize(function () {
                            //drawDeteilsView(featureData)

                            chart.draw(data, options);
                            chartIssueDistributionPie.draw(dataIssueDistribution, optionsIssueDistribution);
                            chartVelocity.draw(dataVelocity, optionsVelocityChart);
                            chartOpenTotal.draw(dataOpenTotalChart, optionsOpenTotal);
                            chartGauge0.draw(dataGauge0, optionsQualityScoreChart);
                            chartGauge1.draw(dataGauge1, optionsQualityScoreChart);
                            chartGauge2.draw(dataGauge2, optionsQualityScoreChart);
                            chartIssueDistribution.draw(dataIssueDistribution, optionsIssueDistribution);
                        });
                        /**
                        * Close handler
                        */
                        $detailsView.click((e) => {
                            if (e.target.className == "detailsView") {
                                $(window).off('resize')
                                $detailsView.off()
                                $detailsView.hide()
                            }
                        })


                    } catch (error) {
                        $detailsView.hide()
                        console.log(error)
                        alert('No stories for this feature')
                    }

                }
                function rebuildPanelBlock(featureKey) {
                    let encodedFeatureKey = encodeURIComponent(featureKey);
                    doPost(GET_FEATURE_DATA_URL + encodedFeatureKey, {}, function (data) {
                        let panelIndex = STORE.features.findIndex((elem) => elem.featureKey == data.key);
                        if (panelIndex < 0) { return };
                        let $panelBlock = STORE.viewChildren[panelIndex];
                        $panelBlock.empty();
                        $panelBlock.hide();
                        $panelBlock.append($(getTotalViewBlock(data)).data({ featureKey: data.key, teamName: data.teamName }));
                        $panelBlock.off('click');
                        $panelBlock.click(() => { drawDeteilsView(data) });
                        $panelBlock.show();
                    })
                }

                const LABEL_1_TEXT = 'Default value for not estimated issues';
                const LABEL_2_TEXT = 'Originally planned velocity';
                const LABEL_3_TEXT = 'Sprint length in days';
                const LABEL_4_TEXT = 'Roadmap Feature start date';
                /**
                * Builder view for configuration project page (works only for admins)
                */
                class ProjectEditView {
                    constructor(data, wrapperSelector) {
                        console.log('start: ProjectEditView');
                        this.wrapperSelector = wrapperSelector;
                        this.formArea = $('<div>').addClass('editView').click((e) => {
                            e.stopPropagation()
                        });
                        $(this.wrapperSelector).click(this.close.bind(this));
                        this.formArea.empty();
                        $(this.wrapperSelector).show();

                        var header = $('<h2>').text('Edit project page'/*data.summary*/);
                        var _input0 = Create.dropList({
                            text: 'Choose View Type',
                            array: ['Roadmap Feature', 'Epic'],
                            currentVal: STORE.projectConfig.viewType
                        });
                        var _input1 = Create.dropList({
                            text: 'Epics related only to current project:',
                            array: [true, false],
                            currentVal: STORE.projectConfig.isProjectEpics
                        });
                        var _input2 = Create.dropList({
                            text: 'Tickets related only to current project:',
                            array: [true, false],
                            currentVal: STORE.projectConfig.isProjectTickets
                        });
                        var _input3 = Create.dropList({
                            text: 'Group features by:',
                            array: STORE.projectConfig.groups,
                            currentVal: STORE.projectConfig.groupBy
                        });
                        var _saveButton = $('<button>').toggleClass('saveButtun').text('Save').click((e) => {
                            e.stopPropagation();
                            var result = {};
                            result.viewType = _input0.find('select').children("option:selected").text();
                            result.showOnlyProjectEpics = _input1.find('select').children("option:selected").text();
                            result.isProjectTickets = _input2.find('select').children("option:selected").text();
                            result.groupBy = _input3.find('select').children("option:selected").text();

                            projectConfiguration(result, this.close.bind(this));
                        })
                        this.formArea.append(header, _input0, _input1,_input2,_input3,_saveButton);
                        $(this.wrapperSelector).append(this.formArea);

                        console.log('end: render edit view');
                    }
                    /**
                    * Close configuration page
                    */
                    close() {
                        $(this.wrapperSelector).empty();
                        $(this.wrapperSelector).hide();
                    }
                }
                function projectConfiguration(obj, callback) {
                    Fade.on();
                    jQuery.post(BASE_URL + '/plugins/servlet/projectConfiguration?' + DEBUG_MODE + 'projectKey=' + PROJECT_NAME+'&viewType='+obj.viewType+'&isProjectEpics='+obj.showOnlyProjectEpics+'&isProjectTickets='+obj.isProjectTickets+'&groupBy='+obj.groupBy)
                        .done(function (data) {
                            var jsonData = JSON.parse(data);
                            callback();
                            //rebuildPanelBlock(obj.roadmapFeature);
                            Fade.off();
                            if (!!jsonData.statusMessage) {
                                alert(jsonData.statusMessage)
                            } else {
                                location.reload()
                            }
                        })
                        .fail(function () {
                            Fade.off();
                            alert("Are you Admin? or smth wrong");
                        })
                }
                /**
                * Builder view for configuration page
                */
                class EditView {
                    constructor(data, wrapperSelector) {
                        console.log('start: render edit view');
                        this.wrapperSelector = wrapperSelector;
                        this.formArea = $('<div>').addClass('editView').click((e) => { e.stopPropagation() });
                        $(this.wrapperSelector).click(this.close.bind(this));
                        this.formArea.empty();
                        $(this.wrapperSelector).show();

                        var header = $('<h2>').text(data.summary);
                        var _input0 = Create.inputText({ text: LABEL_1_TEXT, value: data.defaultNotEstimatedIssueValue });
                        var _input1 = Create.inputText({ text: LABEL_2_TEXT, value: data.plannedRoadmapFeatureVelocity });
                        var _input2 = Create.inputText({ text: LABEL_3_TEXT, value: data.sprintLengthRoadmapFeature });
                        var _input3 = Create.inputDate({ text: LABEL_4_TEXT, value: data.startDateRoadmapFeature });
                        var _input4 = Create.inputDate({ text: 'Target date', value: data.targetDate });

                        var _saveButton = $('<button>').toggleClass('saveButtun').text('Save').click((e) => {
                            e.stopPropagation();
                            var result = {};
                            var check = 0;
                            if (Check.inputStoryPoints(_input0.find('input').val())) {
                                check++;
                                result.defaultNotEstimatedIssueValue = _input0.find('input').val();
                            };
                            if (Check.inputStoryPoints(_input1.find('input').val())) {
                                check++;
                                result.plannedRoadmapFeatureVelocity = _input1.find('input').val();
                            };
                            if (Check.inputStoryPoints(_input2.find('input').val())) {
                                check++;
                                result.sprintLengthRoadmapFeature = _input2.find('input').val();
                            };

                            var userDate = +new Date(_input3.find('input').val());
                            var isTimeHaveDiff = new Date(userDate).toDateString() != new Date(+data.startDateRoadmapFeature).toDateString();
                            if (isTimeHaveDiff) {
                                check++;
                                result.startDateRoadmapFeature = userDate;
                            };
                            var userDate4 = +new Date(_input4.find('input').val());
                            var isTimeHaveDiff4 = new Date(userDate4).toDateString() != new Date(+data.targetDate).toDateString();
                            if (isTimeHaveDiff4) {
                                check++;
                                result.targetDate = userDate4;
                            };

                            if (!check) { return };
                            result.roadmapFeature = data.key;
                            getFeaturesDateAndBuild(result, this.close.bind(this));
                        })

                        this.formArea.append(header, _input0, _input1, _input2, _input3, _input4, _saveButton);
                        $(this.wrapperSelector).append(this.formArea);

                        console.log('end: render edit view');
                    }
                    /**
                    * Close configuration page
                    */
                    close() {
                        $(this.wrapperSelector).empty();
                        $(this.wrapperSelector).hide();
                    }
                }
                function getFeaturesDateAndBuild(obj, callback) {
                    var queryString = new URLSearchParams(obj).toString()
                    Fade.on();
                    jQuery.post(POST_UTL+'&'+queryString)
                        .done(function (data) {
                            var jsonData = JSON.parse(data);
                            callback();
                            rebuildPanelBlock(obj.roadmapFeature);
                            Fade.off();
                        })
                        .fail(function () {
                            Fade.off();
                            alert("POST error");
                        })
                }
                /**
                * Builder for input fields
                * metods return DOMElemnt with input field
                */
                class Create {
                    static inputText(props) {
                        var _label = $('<label>').text(props.text);
                        var _input = $('<input>')
                            .prop({
                                placeholder: props.value,
                                type: 'number'
                            })
                            .on('input', function () {
                                let val = +$(this).val();
                                Check.inputStoryPoints(val) ? $(this).removeClass('wrongIput') : $(this).addClass('wrongIput');
                            });
                        return $('<div>').append(_label, _input);
                    }
                    static inputDate(props) {
                        var _label = $('<label>').text(props.text);
                        var _input = $('<input>')
                            .prop({
                                type: 'date'
                            })
                        _input.prop({ valueAsNumber: +props.value });
                        return $('<div>').append(_label, _input)
                    }
                    static dropList(props) {
                        var _label = $('<label>').text(props.text);
                        var _select = $('<select>');
                        var selectedKey = 0
                        jQuery.each(props.array, function (key, value) {
                            if(props.currentVal==value){selectedKey = key}
                            _select.append('<option value="' + key + '">' + value + '</option>');
                        });
                        _select.val(selectedKey)
                        return $('<div>').append(_label, _select)
                    }
                }
                /**
                * Сhecking if a number is in the range
                * return bool
                */
                class Check {
                    static inputStoryPoints(value) {
                        return !!(+value && MIN_INPUT_SP <= value && value <= MAX_INPUT_SP)
                    }
                }
                /**
                * Black shadow with spinner
                */
                class Fade {
                    static on() {
                        FadeBlock.style.display = 'block';
                    }
                    static off() {
                        FadeBlock.style.display = 'none';
                    }
                }
                /**
                * Post request with error handling
                * @param {string} url
                * @param {object} postData
                * @param {function} callback
                */
                function doPost(url, postData, callback,type) {
                    var POST_OR_GET_TYPE = type=='get'?'get':'post'
                    jQuery[POST_OR_GET_TYPE](url, postData)
                        .done(function (textData) {
                            var jsonData = JSON.parse(textData)
                            if (!!jsonData.logInfo) {
                                console.warn(
                                    `
type:${POST_OR_GET_TYPE}
url: ${url}
body: ${jsonData}
statusMessage: ${jsonData.statusMessage}
logInfo: ${jsonData.logInfo.replaceAll('<br>', '\n')}
`)
                            }
                            if (!!jsonData.statusMessage) { dataMessageError(jsonData) }
                            callback(jsonData)
                        })
                        .fail(function (err) {
                            alert(`${POST_OR_GET_TYPE} error`)
                        })
                }
                /**
                * Logging error in console
                * @param {object} data
                */
                function dataMessageError(data) {
                    console.log('----------------data.statusMessage----ERROR---------------')
                    console.log(data.statusMessage)
                    console.log(data)
                }

            } catch (error) {
                document.body.prepend(error)
            }

        </script>
    </body>

    </html>
</div>

<tr class="mod-header">
    <h3>Playgile Studio Total View for $project.name ($project.getKey())</h3>

<html>
<head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', {'packages':['corechart']});
        google.charts.load('current', {'packages':['gauge']});
        google.charts.load('current', {'packages':['timeline']});
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {
            if (!$allisok) return; //no need to execute
            /////////// project predictions
            const LINE_SEPARATOR = "BOBRUISK";
            const PAIR_SEPARATOR = "|";
            const DATE_FORMAT = "MM/dd/yyyy";

            //split by lines
            var featureRows = '$featuresrows';
            //split and parse
            if (typeof featureRows === 'undefined' || featureRows === null)
            {
                alert("No rows for the page");
                return;
            }

            var lines = featureRows.split(LINE_SEPARATOR);
            if (lines.length <= 0)
            {
                alert("Wrong rows format " + featureRows);
                return;
            }
            // Find a <table> element with id="myTable":
            var table = document.getElementById("roadmap-features-table");
            var rowCounter = 0;
            var rowHeight = 100;
            lines.forEach(function (line, index) {
                if (line.length > 0)//non empty line
                {
                    //split by pair separator
                    var items = line.split(PAIR_SEPARATOR);
                    if (items.length < 11)
                    {
                        alert("Wrong line format " + line);
                    }

                    //add new row to table
                    // Create an empty <tr> element and add it to the 1st position of the table:
                    var row = table.insertRow(rowCounter);

                    //////////////////////////////////////////
                    var createClickHandler =
                            function(row)
                            {
                                return function() {
                                    var cell = row.getElementsByTagName("td")[2];
                                    var encodedFeatureName = encodeURIComponent(cell.innerText);
                                    jQuery.ajax({
                                        type: "GET",
                                        async: false,
                                        url: '$baseurl' + "/plugins/servlet/activeobjectsaccess?projectKey=" + '$project.getKey()'
                                        + "&roadmapfeature=" + encodedFeatureName + "&user=" + '$currentuser',
                                        success: function(data) {
                                            var newUrl = window.location.href.replace('totalview', 'metrics');
                                            window.location.href = newUrl;
                                        },
                                        error: function() {
                                            alert("error");
                                            //console.log('error', arguments);
                                        }
                                    });
                                };
                            };

                    row.onclick = createClickHandler(row);

                    //////////////////////////////////////////

                    var featureStatus = parseFloat(items[1]);
                    var featureStatusCell = row.insertCell(0);
                    featureStatusCell.width = 100;
                    featureStatusCell.height = rowHeight;
                    featureStatusCell.id = "feature-status" + rowCounter;
                    var dataStatusGauge = google.visualization.arrayToDataTable([
                        ['Label', 'Value'],
                        ['Status', featureStatus],
                    ]);

                    var featureStatusGaugeOptions = {
                        width: 100, height: rowHeight,
                        redFrom: 0, redTo: 50,
                        yellowFrom:50, yellowTo: 70,
                        greenFrom: 70, greenTo: 100,
                        minorTicks: 5
                    };

                    var featureStautsGauge = new google.visualization.Gauge(document.getElementById(featureStatusCell.id));

                    featureStautsGauge.draw(dataStatusGauge, featureStatusGaugeOptions);

                    ///////////////////////////////////////////////////////////////

                    var featureName = items[0];
                    var featureNameCell = row.insertCell(1);
                    featureNameCell.width = 100;
                    featureNameCell.height = rowHeight;
                    featureNameCell.innerText = featureName;
                    featureNameCell.id = "feature-name";


                    /////////////////////////////////////////////////////////////////////////

                    var startDate = new Date(items[2]);
                    var startDateCell = row.insertCell(2);
                    startDateCell.width = 100;
                    startDateCell.height = rowHeight;
                    startDateCell.innerText = 'Started on ' + startDate.toDateString();

                    ////////////////////////////////////////////////////////////////////////

                    var teamVelocity = parseFloat(items[3]);
                    var projectVelocity = parseFloat(items[4]);
                    var velocityCell = row.insertCell(3);
                    velocityCell.width = 200;
                    velocityCell.height = rowHeight;
                    velocityCell.id = "velocities" + rowCounter;

                    var dataVelocities = google.visualization.arrayToDataTable([
                        ['', 'Predicted', 'Real'],
                        ['', teamVelocity, projectVelocity]
                    ]);

                    var optionsVelocities = {
                        title: 'Velocities',
                        chartArea: {width: '50%'},
                        colors: ['#b0120a', '#ffab91'],
                        hAxis: {
                            title: 'Story Points per Sprint',
                            minValue: 0
                        }
                    };
                    var chartVelocities = new google.visualization.BarChart(document.getElementById(velocityCell.id));
                    chartVelocities.draw(dataVelocities, optionsVelocities);


                    //////////////////////////////////////////////////////////////////////////

                    var idealEndOfProject = new Date(items[5]);
                    var predictedEndOfProject = new Date(items[6]);
                    var projectEndCell = row.insertCell(4);
                    projectEndCell.width = 300;
                    projectEndCell.height = rowHeight;
                    projectEndCell.id = "project-end" + rowCounter;

                    var dataProjectEnd = new google.visualization.DataTable();
                    dataProjectEnd.addColumn('string', '');
                    dataProjectEnd.addColumn('date', 'Start Date');
                    dataProjectEnd.addColumn('date', 'End Date');

                    dataProjectEnd.addRows([
                        ['Predicted', startDate, idealEndOfProject],
                        ['Real', startDate, predictedEndOfProject],
                    ]);

                    var optionsProjectEnd = {
                        height: rowHeight,
                        timeline: {
                            groupByRowLabel: true,
                            rowLabelStyle: { fontSize: 10 },
                            barLabelStyle: { fontSize: 5 }
                        }
                    };

                    var chartProjectEnd = new google.visualization.Timeline(document.getElementById(projectEndCell.id));
                    chartProjectEnd.draw(dataProjectEnd, optionsProjectEnd);

                    ////////////////////////////////////////////////////////////////////
                    var notEstimatedNumber = parseFloat(items[7]);
                    var largeStoriesNumber =  parseFloat(items[8]);
                    var veryLargeStoriesNumber =  parseFloat(items[9]);
                    var estimatedStoriesNumber =  parseFloat(items[10]);

                    var issueDistributionCell = row.insertCell(5);
                    issueDistributionCell.width = 300;
                    issueDistributionCell.height = rowHeight;
                    issueDistributionCell.id = "issues-estimation" + rowCounter;

                    var dataIssueDistribution = new google.visualization.DataTable();

                    dataIssueDistribution.addColumn('string', 'Category');
                    dataIssueDistribution.addColumn('number', 'Value');

                    dataIssueDistribution.addRow(['Not estimated', notEstimatedNumber]);
                    dataIssueDistribution.addRow(['Very Large (21 points)', veryLargeStoriesNumber]);
                    dataIssueDistribution.addRow(['Large (13 points)', largeStoriesNumber]);
                    dataIssueDistribution.addRow(['Normal', estimatedStoriesNumber]);

                    var totalStories = notEstimatedNumber + largeStoriesNumber + veryLargeStoriesNumber + estimatedStoriesNumber;

                    var optionsIssueDistribution = {
                        title: 'Total ' + totalStories + ' issues'
                    };

                    var chartIssueDistribution = new google.visualization.PieChart(document.getElementById(issueDistributionCell.id));

                    chartIssueDistribution.draw(dataIssueDistribution, optionsIssueDistribution);
                }

                rowCounter++;
            });

        }
    </script>
</head>
<body>
#if (!$allisok)
<script>
    var dialog = new AJS.Dialog({
        id: "message-status-dialog",
        closeOnOutsideClick: false
    });

    dialog.addHeader("Playgile Studio View");
    dialog.addPanel("Panel 1", '<h1 style="color:red">$messagetodisplay</h1>', "panel-body");

    dialog.addButton("OK", function (dialog) {
        dialog.hide();
    }, "#");
    dialog.show();
</script>
<h1 style="color:red">$messagetodisplay</h1>
#end

#if ($allisok)
<table id="roadmap-features-table">
</table>

#end
</body>
</html>
<table>
    <div style="height:50px;width:100px;border:1px solid #ccc;font:8px/8px Georgia, Garamond, Serif;overflow:auto;">
        $statustext
    </div>
</table>
</div>

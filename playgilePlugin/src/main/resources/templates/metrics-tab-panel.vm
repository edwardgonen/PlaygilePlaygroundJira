<tr class="mod-header">
    <h3>$i18n.getText('metrics--page--item.label') for $project.name ($project.getKey())</h3>
    <!--img style="-webkit-user-select: none" src="https://chart.googleapis.com/chart?cht=p&chs=380x200&chd=t:41,55,4&chl=41%|55%|4%&chdl=Cash|Credit_Card|Check&chco=26AD21|1D82C4|F0A016"-->

    <html>
    <head>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script>
            $(document).ready(function(){

                $("#roadmapfeature").on("change",function(){
                    var roadmapfeature = document.getElementById("roadmapfeature").value;
                    var encodedFeatureName = encodeURIComponent(roadmapfeature);
                    jQuery.ajax({
                        type: "GET",
                        async: false,
                        url: '$baseurl' + "/plugins/servlet/activeobjectsaccess?projectKey=" + '$project.getKey()'
                        + "&roadmapfeature=" + encodedFeatureName + "&user=" + '$currentuser',
                        success: function(data) {
                            //alert('222');
                            location.reload();
                            //JIRA.trigger(JIRA.Events.REFRESH_ISSUE_PAGE, [JIRA.Issue.getIssueId()]);
                        },
                        error: function() {
                            alert("error");
                            //console.log('error', arguments);
                        }
                    });
                });
            });
        </script>
        <script type="text/javascript">
            const TODAY_LOCAL_FORMAT = new Date().toLocaleDateString()
            const BACKGROUND_COLOR = '#f4f5f7'
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {
                if (!$allisok) return; //no need to execute
                /////////// project predictions
                const LINE_SEPARATOR = ",";
                const PAIR_SEPARATOR = "|";
                const DATE_FORMAT = "MM/dd/yyyy";

                var data = new google.visualization.DataTable();
                data.addColumn('date', 'Date');
                data.addColumn({type: 'string', role: 'annotation'});
                data.addColumn('number', 'Initial Velocity');
                data.addColumn('number', 'Predicted Velocity');

                var chartRows = '$chartrows';
                //split and parse
                if (typeof chartRows === 'undefined' || chartRows === null){
                    alert("No rows for the chart");
                    return;
                }

                var lines = chartRows.split(LINE_SEPARATOR);
                if (lines.length <= 0){
                    alert("Wrong rows format " + chartRows);
                    return;
                }
                lines.forEach(function (line, index) {
                    if (line.length > 0)//non empty line
                    {
                        //split by pair separator
                        var items = line.split(PAIR_SEPARATOR);
                        if (items.length < 3)
                        {
                            alert("Wrong line format " + line);
                        }

                        var date = new Date(items[0]);

                        var ideal = Math.round(parseFloat(items[1])) || null;

                        var predicted = parseFloat(items[2]) || null;

                        let _annotation = items[0]==TODAY_LOCAL_FORMAT? 'Remaining '+ideal+' SP ' :null;

                        data.addRow([date,_annotation, ideal, predicted]);
                        //data.addRow([new Date(2010, 1, 1),  37.8, 80.8]);
                    }
                });
                var options = {
                    title: 'Project Monitor\nPredicted completion is ' + '$predictedendofproject' + ' based on velocity of ' + '$averagerealvelocity' + ' SP',
                    lineWidth: 3,
                    series: {
                        0: {lineDashStyle: [0, 0]},
                        1: {lineDashStyle: [2, 2], color: '$predictioncolor'}
                    },
                    width:'100%',
                    height:'100%',
                    annotations: {
                        style:'line',
                        textStyle: {
                            fontName: 'sans-serif',
                            fontSize: 12,
                            //bold: true,
                            //italic: true,
                            // The color of the text.
                            //color: '#871b47',
                            // The color of the text outline.
                            //auraColor: '#d799ae',
                            // The transparency of the text.
                            //opacity: 0.8
                        }
                    },
                    vAxes: [
                        {
                            title: 'Story Points',
                            viewWindow: {
                                min: 0
                            }
                        }
                    ],
                    curveType: 'function',
                    legend: { position: 'bottom' },
                    backgroundColor: BACKGROUND_COLOR
                };

                var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

                chart.draw(data, options);

                ////////////////////// issues pie
                var dataIssueDistribution = new google.visualization.DataTable();

                dataIssueDistribution.addColumn('string', 'Category');
                dataIssueDistribution.addColumn('number', 'Value');


                var notEstimatedNumber = parseFloat('$notestimatedstories') || 0;

                var largeStoriesNumber =  parseFloat('$largestories') || 0;

                var veryLargeStoriesNumber =  parseFloat('$verylargestories') || 0;

                var estimatedStoriesNumber =  parseFloat('$estimatedstories') || 0;

                dataIssueDistribution.addRow(['Not estimated', notEstimatedNumber]);
                dataIssueDistribution.addRow(['Very Large (21 points)', veryLargeStoriesNumber]);
                dataIssueDistribution.addRow(['Large (13 points)', largeStoriesNumber]);
                dataIssueDistribution.addRow(['Normal', estimatedStoriesNumber]);

                var totalStories = notEstimatedNumber + largeStoriesNumber + veryLargeStoriesNumber + estimatedStoriesNumber;

                var optionsIssueDistribution = {
                    title: 'Project Issues Analysis. Total ' + totalStories + ' issues',
                    backgroundColor: BACKGROUND_COLOR,
                    width:'100%',
                    height:'100%'
                };

                var chartIssueDistribution = new google.visualization.PieChart(document.getElementById('piechart'));

                chartIssueDistribution.draw(dataIssueDistribution, optionsIssueDistribution);

                ///////////////////////velocity chart ////////////////
                var dataVelocity = new google.visualization.DataTable();
                dataVelocity.addColumn('date', 'Date');
                dataVelocity.addColumn('number', 'Actual Velocity');
                dataVelocity.addColumn('number', 'Predicted Velocity');

                var velocityChartRows = '$realvelocities';
                //split and parse
                if (typeof velocityChartRows === 'undefined' || velocityChartRows === null){
                    alert("No rows for the chart");
                    return;
                }
                var lines = velocityChartRows.split(LINE_SEPARATOR);
                if (lines.length <= 0){
                    alert("Wrong velocity rows format " + chartRows);
                    return;
                }

                lines.forEach(function (line, index) {
                    if (line.length > 0){
                        //split by pair separator
                        var items = line.split(PAIR_SEPARATOR);
                        if (items.length < 3){
                            alert("Wrong real velocity line format " + line);
                        }

                        var date = new Date(items[0]);
                        var realVelocity = parseFloat(items[1]);
                        if (isNaN(realVelocity)) {
                            alert('Wrong velocity format ' + items[1]);
                            realVelocity = 0;
                        }
                        var linearVelocity = parseFloat(items[2]);
                        if (isNaN(linearVelocity)) {
                            alert('Wrong velocity format ' + items[2]);
                            linearVelocity = 0;
                        }
                        dataVelocity.addRow([date, realVelocity, linearVelocity]);
                    }
                });

                var optionsVelocityChart = {
                    title: 'Actual Velocity Chart\nLinear regression predicted velocity: ' + '$averagerealvelocity',
                    lineWidth: 3,
                    width:'100%',
                    height:'100%',
                    series: {
                        0: {lineDashStyle: [0, 0]},
                        1: {lineDashStyle: [10, 2], color: 'black'}
                    },
                    vAxes: {
                        0: {
                            title: 'Story Points per Sprint',
                            viewWindow: {
                                min: 0
                            }
                        }
                    },
                    curveType: 'function',
                    legend: { position: 'bottom' },
                    backgroundColor: BACKGROUND_COLOR
                };

                var chartVelocity = new google.visualization.LineChart(document.getElementById('velocity_chart'));

                chartVelocity.draw(dataVelocity, optionsVelocityChart);

                ////////// issues distribution
                var distributionResult = '$issuedistribution';
                //split and parse
                if (typeof distributionResult === 'undefined' || distributionResult === null){
                    alert("No distribution data for chart");
                    return;
                }

                var firstQ, secondQ, thirdQ, fourthQ, nonCompleted;
                if (distributionResult.length > 0){
                    //split by pair separator
                    var items = distributionResult.split(PAIR_SEPARATOR);
                    if (items.length < 5){
                        alert("Wrong real velocity line format " + distributionResult);
                    }

                    var distributionValue = parseFloat(items[0]);
                    if (isNaN(distributionValue)) {
                        alert('Wrong distribution data format ' + items[0]);
                        firstQ = 0;
                    }
                    else {
                        firstQ = distributionValue;
                    };

                    distributionValue = parseFloat(items[1]);
                    if (isNaN(distributionValue)) {
                        alert('Wrong distribution data format ' + items[1]);
                        secondQ = 0;
                    }
                    else {
                        secondQ = distributionValue;
                    };

                    distributionValue = parseFloat(items[2]);
                    if (isNaN(distributionValue)) {
                        alert('Wrong distribution data format ' + items[2]);
                        thirdQ = 0;
                    }
                    else {
                        thirdQ = distributionValue;
                    };

                    distributionValue = parseFloat(items[3]);
                    if (isNaN(distributionValue)) {
                        alert('Wrong distribution data format ' + items[3]);
                        fourthQ = 0;
                    }
                    else {
                        fourthQ = distributionValue;
                    };
                };

                var dataIssueDistribution = google.visualization.arrayToDataTable([
                    ["Segment", "Distribution", { role: "style" } ],
                    ["1/4 of sprint", firstQ, "#3366CC"],
                    ["2/4 of sprint", secondQ, "#3366CC"],
                    ["3/4 of sprint", thirdQ, "#3366CC"],
                    ["End of sprint", fourthQ, "#3366CC"]
                ]);

                var optionsIssueDistribution = {
                    width:'100%',
                    height:'100%',
                    title: "Average Issue Closure Distribution (%) in a typical sprint",
                    bar: {groupWidth: "90%"},
                    legend: { position: "bottom" },
                    vAxes: {
                        0: {
                            title: 'Percentage of closed issues',
                            viewWindow: {
                                min: 0
                            }
                        }
                    },
                    backgroundColor: BACKGROUND_COLOR
                };
                var chartIssueDistribution = new google.visualization.ColumnChart(document.getElementById("issue_distribution"));
                chartIssueDistribution.draw(dataIssueDistribution, optionsIssueDistribution);
            }
            function OnRecalculateClick()
            {
                var velocity = document.getElementById("velocity").value;
                var roadmapfeature = document.getElementById("roadmapfeature").value;
                var encodedFeatureName = encodeURIComponent(roadmapfeature);

                jQuery.ajax({
                    type: "GET",
                    async: false,
                    url: '$baseurl' + "/plugins/servlet/activeobjectsaccess?projectKey=" + '$project.getKey()'
                        + "&teamVelocity=" + velocity + "&roadmapfeature=" + encodedFeatureName + "&user=" + '$currentuser',
                    success: function(data) {
                        //alert(data);
                        //location.reload();
                        //JIRA.trigger(JIRA.Events.REFRESH_ISSUE_PAGE, [JIRA.Issue.getIssueId()]);
                    },
                    error: function() {
                        alert("error");
                        //console.log('error', arguments);
                    }
                });
            }
        </script>
    </head>
        <body>
            #if (!$allisok)
                <script>
                    var dialog = new AJS.Dialog({
                        id: "message-status-dialog",
                        closeOnOutsideClick: false
                    });

                    dialog.addHeader("Playgile Project Monitor");
                    dialog.addPanel("Panel 1", '<h1 style="color:red">$messagetodisplay</h1>', "panel-body");

                    dialog.addButton("OK", function (dialog) {
                        dialog.hide();
                    }, "#");
                    dialog.show();
                </script>
                <h1 style="color:red">$messagetodisplay</h1>
            #end

            #if ($roadmapfeatureslist.size()> 0)
                <form id="admin" class="aui">
                    <tr>
                    <tr class="field-group">
                        <label for="roadmapfeaturelabel">Roadmap Feature</label>
                        <select id="roadmapfeature" name="roadmapfeature">
                            #foreach( $item in $roadmapfeatureslist )
                                #if ($item == $selectedroadmapfeature)
                                    <option value="$item" selected="selected">$item</option>
                                #else
                                    <option value="$item">$item</option>
                                #end
                            #end
                        </select>
                    </tr>
                    <tr class="field-group">
                        <label for="velocity">Team's velocity</label>
                        <input type="number" id="velocity" value=$teamvelocity name="velocity" class="text" min="0" max="1000" style="width: 10em;">
                    </tr>
                    <tr class="field-group">
                        <input type="submit" value="Recalculate" class="button" onClick="OnRecalculateClick()">
                    </tr>
                    </tr>
                </form>
            #end
            #if ($allisok)
                <div style="width:100%; height:35vh; display: inline-flex;">
                    <div id="curve_chart" style="width:50%; height:100%; padding:5px"></div>
                    <div id="velocity_chart" style="width:50%; height:100%;  padding:5px"></div>
                </div>
                <div style="width:100%; height:35vh; display: inline-flex;">
                    <div id="piechart" style="width:50%; height:100%;  padding:5px"></div>
                    <div id="issue_distribution" style="width:50%; height:100%;  padding:5px"></div>
                </div>

            #end
        </body>
    </html>
    <table>
        <div style="height:50px;width:100px;border:1px solid #ccc;font:8px/8px Georgia, Garamond, Serif;overflow:auto;">
            $statustext
        </div>
    </table>
</div>
